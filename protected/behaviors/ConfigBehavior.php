<?php

/**
 * Дополнительные функции для моделей, работающих с настройками
 * Содержит стандартные именованные группы условий поиска для извлечения записей настроек
 * К списку настроек модели могут быть прикреплены только настройки с `objecttype` = 'тип_модели'
 * 
 * Поведение использует настройки родительских моделей как шаблоны (значения по умочанию) для
 * новых настроек модели, к которой прикрепляется поведение. Иерархия моделей может быть любой,
 * но модели нижнего уровня должны содержать в себе связь (relation) с родительскими моделями. 
 * Тип связи должен быть BELONGS_TO или HAS_ONE
 * Если иерархия для настроек не задана - то в настройках новых моделей в качестве значений по 
 * умолчанию будут использоваться корневые настройки модели (это настройки с objectid=0) 
 * 
 * Этот класс также отвечает за целостность таблицы настроек:
 * - создает все нужные настройки при создании новой модели
 * - удаляет связанные настройки при удалении модели
 * При этом об исправлении ссылок на удаленные настройки позаботится сама содель Config во время своего   
 * удаления (используя beforeDelete())
 * 
 * Поведение содержит стандартные методы для получения и сохранения значения настройки связанной
 * модели, поэтому все действия с настройками модели должны происходить через методы этого поведения
 * Оно также ведет историю изменений настроек, отслеживая какие настройки меняются пользователями и как
 * 
 * При соеднинении с моделью поведение дополняет список ее сязей (relations): это позволит
 * стандартным образом искать любые модели по значениям настроек, используя именованные группы
 * условий поиска (scopes)
 * Если модель уже имеет связи с такими именами, то будет создано исключение
 * 
 * Виджет редактирования настроек также опирается на это поведение для получения полного списка
 * всех настроек для отображения формы редактирования
 * 
 * Задавать полный список всех настроек модели при подключении поведения не нужно: этот список
 * извлекается из таблицы {{config}} по objecttype/objectid (для существующей модели)
 * Для определения того, какой список настроек нужен для новой модели мы извлекаем все настройки
 * с objecttype равным имени класса модели и objectid=0
 * 
 * Значения настроек редактируются отдельно от значений модели, как правило стандартным виджетом:
 * поэтому синхронизация редактирования модели и редактирования настроек не требуется
 * 
 * @todo проверка, существует ли требуемая настройки для модели
 * @todo проверка, отличается ли значение настройки от стандартного/корневого
 */
class ConfigurableBehavior extends CActiveRecordBehavior
{
    /**
     * @var array - связи модели (relations), содержащие в себе объекты, являющиеся шаблонами 
     *              для настроек текущей модели ($this->owner) 
     *              Для разных настроек могут быть заданы разные связи (relations). 
     *              Настройки из этих связанных объектов будут использованы как шаблоны 
     *              ($config->parentConfig) при создании настроек для текущей модели ($this->owner) 
     *              
     *              Пример $this->parentRelations для модели мероприятия (ProjectEvent): 
     *              array(
     *                  // максимальное количство изображений в галереи берется из галереи
     *                  'galleryLimit'     => 'gallery.limit',
     *                  // значение подчтавляемое в поле "тип события" при создании новой записи
     *                  // берется из объекта
     *                  'defaultEventType' => 'project',
     *              )  
     */
    public $parentRelations = array();
    /**
     * 
     * @var string - связь по умолчанию (relation) значения настроек из которой выбираются как
     *               шаблоны для текущих настроек
     */
    public $defaultParentRelation;
    
    /**
     * Создает полный список настроек при создании модели
     * @see CActiveRecordBehavior::beforeSave()
     */
    protected function afterSave($event)
    {
         
    }
    
    /**
     * Удаляет все связанные настройки при удалении модели
     * @see CActiveRecordBehavior::beforeDelete()
     */
    protected function beforeDelete($event)
    {
         
    }
    
    /**
     * Получить полный список всех настроек для связаной модели
     * @return Config[] - массив, содержащий все доступные для этой модели настройки
     *                    или пустой массив, если настройки для этой модели не предусмотрены
     *                    Если модель еще не сохранена - то возвращает список корневых настроек модели
     */
    public function getFullConfigSet()
    {
        
    }
    
    /**
     * Получить полный список родительских настроек для связаной модели
     * @return Config[] - массив, содержащий все родительские настройки для этой модели
     *                    или пустой массив, если настройки для этой модели не предусмотрены
     *                    Если модель еще не сохранена - то возвращает список корневых настроек модели
     */
    public function getParentConfigSet()
    {
        
    }
    
    /**
     * Получить полный список всех корневых настроек для связаной модели
     * @return Config[] - массив, содержащий все доступные корневые настройки для выбранной модели
     *                    или пустой массив, если настройки для этой модели не предусмотрены
     */
    public function getRootConfigSet()
    {
        
    }
    
    public function getConfigObject($name)
    {
        
    }
    
    public function getConfigValue($name)
    {
    
    }
    
    public function getConfigTitle($name)
    {
    
    }
    
    public function getConfigOptionTitle($configName, $optionId)
    {
        
    }
}